<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何将建筑建造作为一种技能</title>
      <link href="/2024/03/10/Implement_Building_System_With_GAS/"/>
      <url>/2024/03/10/Implement_Building_System_With_GAS/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/building_structures_with_gas.gif"></p><p>在很多提供建造玩法的项目案例中，往往是定义 ActorComponent 类并在那里实现启用建造功能、选择建造位置、轻微调整建筑物、生成建筑物等功能，随后角色类会使用该 ActorComponent 的实例，从而获得建造建筑的能力。这需要开发者处理玩家能否启用建造功能，例如当玩家获得阵亡、沉睡、眩晕等状态时需要阻止建筑功能逻辑的执行，并且停止正在进行的建造进程。</p><p>除此之外，很多解决方案还采取了引入若干个碰撞频道来实现建筑物对齐功能，这会至少引发三个问题：1. 迁移代码到其他项目时总是需要添加这些额外的碰撞频道；2. 每次引入新的碰撞频道时，需要检查之前的建筑物是否已经忽略了新频道，避免出现错误的对齐；3. 开发者需要检查每个 BoxComponent 是否正确阻挡了对应的频道，增加了因开发者分心、遗忘所造成的程序错误逻辑概率。</p><p>所以这篇博客集中于以下几点实现建造功能：</p><ul><li>将建造功能作为一项 Ability 来实现，后期玩家获得的状态影响着玩家是否能够建造；</li><li>设计师只需要按照命名规范为 BoxComponent 起合适的名字，并调整对齐位置点即可。</li></ul><h2 id="BoxComponent"><a href="#BoxComponent" class="headerlink" title="BoxComponent"></a>BoxComponent</h2><p>虚幻引擎定义的组件基本都支持基类来派生出新的类，BoxComponent 作为碰撞组件也常常在建造物类内被放置在不同位置处，提示其他建筑物可以对齐的位置处。下图是地基类建筑可以设置其他地基、墙壁可以对齐的位置演示。<br><img src="/images/demo_foundation_structure.png"></p><p>对齐功能是在射线追踪碰到我们的 structure 类实例时，检查遇到的 BoxComponent 是否满足对齐的建筑物类型，如果是的话就将 BoxComponent 的变换作为预览建筑物的变换。应用 BoxComponent 的逻辑实现在下一节中，本节讨论如何为 BoxComponent 附上合适的建筑物类型，例如墙壁建筑物能找到指示墙壁对齐的 BoxComponent。</p><p>我个人比较喜欢的是让每一个行为都有意义，包括为 BoxComponent 实例命名。在上面的图片中可以看到 FoundationX、WallX 格式的名字，这些数字（X）前面的字符串就为 BoxComponent 定义了类型。这样名字不仅帮助设计师区分不同组件，还进一步确定了它可以对齐的建筑物类型。为实现这种名称决定类型的功能，我们需要一个枚举类和 BoxComponent 派生类，具体实现如下：</p><pre><code class="highlight kotlin"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">EStructureType</span> : <span class="type">uint8</span>{None,Foundation,Wall,<span class="comment">// other stuff</span>};EStructureType UBota_BoxComponent::GetCollisionType() <span class="keyword">const</span>{<span class="keyword">const</span> auto&amp; EnumPtr = FindObject&lt;UEnum&gt;(ANY_PACKAGE, TEXT(<span class="string">"EStructureType"</span>), <span class="literal">true</span>);<span class="keyword">for</span> (int32 i = <span class="number">0</span>; i &lt; EnumPtr-&gt;NumEnums(); ++i){<span class="keyword">if</span> (GetNameSafe(<span class="keyword">this</span>).StartsWith(EnumPtr-&gt;GetNameStringByIndex(i))){<span class="keyword">return</span> static_cast&lt;EStructureType&gt;(EnumPtr-&gt;GetValueByIndex(i));}}<span class="keyword">return</span> EStructureType::None;}</code></pre><p>在上述代码中，EStructureType 决定了当前项目中有哪些建筑物类型。自定义的 UBota_BoxComponent 派生自 UBoxComponent，它会根据自己的名字找到匹配的建筑枚举项并返回。充分使用了虚幻引擎提供的反射机制，使得我们可以随时添加建筑物的类型，而无需修改 BoxComponent 的代码。</p><h2 id="技能的实现"><a href="#技能的实现" class="headerlink" title="技能的实现"></a>技能的实现</h2><p>在 GAS 插件下，需要玩家选择技能释放位置时会用到继承自 AGameplayAbilityTargetActor 的类实例。它封装了一个 TargetDataHandle，在玩家发出确认目标的请求时就会将处理后的信息封装成 TargetDataHandle 然后以委托的形式传递出去，这是一种在技能类中客户端向服务器通信发送数据的方式。虚幻官方提供了如 ActorPlacement、GroundTace、SingleLineTrace 等派生类供开发者直接使用，这些派生类会在射线追踪中将 HitResult 的实例传递出去，在一些仅需要位置信息的技能中很有用。但对于建造技能来说，我们还需要知道玩家设置的旋转信息，以便于建筑物能出现在正确的变换中（这里假设了缩放永远是 1）。所以为了实现建造技能，我们需要：派生自 AGameplayAbilityTargetActor 的类作为预览建筑选择合适的位置，尝试找到可能的捕获点；定义能传递位置和旋转的 TargetData 并且能转换为 TargetDataHandle 广播出去和从后者得到 TargetData。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
            <tag> GAS </tag>
            
            <tag> SurvivalCraft </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
